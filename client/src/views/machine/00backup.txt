디코에 사용자 로그인 정보 있음



=================================================================================================



초기화 - 주황색(#fb8c00)
삭제 - 빨간색(#f44335)
등록(초기화, 삭제 아닌 버튼들) - 초록색(#4caf50)

클래스 명을 btn-danger, btn-success, btn-warning 이렇게 주면 해당 색깔과 같은 색으로 지정됩니다 

테이블 -> 숫자는 오른쪽정렬 
글자(글자수 다른 값) 왼쪽정렬
글자(날짜 등 글자수 같은 값) 중간정렬




=================================================================================================

<할일>
유효성 체크
설비 상세 레이아웃 수정
정비 요청 / 부품 등록 선택지 수정


-- 설비 등록 업체 선택 모달?



[레이아웃]
비가동 내역에 상세 내용 표시(비동기 사유, 등록자, 종료자)
정비 요청 등록 - 선택창 변경


-- 비가동 완료시간 정해져 있는 경우 자동으로 설비 상태 run으로 변경




<작업완료>
설비 수정에서 부품 수정 및 삭제
로그인 사원 권환 확인





=================================================================================================
<notify>
1. text에 내용 적고
2. type에는 세가지 문자열 값만 들어갈 수 있음
    1. success: 초록색
    2. error: 빨간색
    3. warn: 주황색

this.$notify({
      text: "중복 주문은 등록 불가합니다",
      type: 'fail',
});






=================================================================================================
<session>

== options ==
import { mapMutations } from "vuex";

  data() {
    return {
      // 로그인 사원 권한 체크
      checkJob: this.$store.state.loginInfo.job == '설비' ? true : this.$store.state.loginInfo.job == '관리자' ? true : false,

  methods: {
    // 로그인 정보
    ...mapMutations(["addLoginInfo"]),


== composition ==
import { useStore } from 'vuex';

const store = useStore();

const checkJob = ref(
  store.state.loginInfo.job == '설비' ? true : store.state.loginInfo.job == '관리자' ? true : false
);


<!-- 모달 샘플 -->
<template>
  <div>
      <h3>{{ testing }}</h3>
  </div>
</template>

<script>
import { mapMutations } from "vuex";

export default {
  data() {
    return {
      testing: {},
    };
  },
  methods: {
    ...mapMutations(["addLoginInfo"]),
    test(){
      this.testing = this.$store.state.loginInfo;
      console.log('ddd', this.$store.state.loginInfo);
    },
  },

  mounted() {
      this.test();
  },
};
</script>






== composition ==
<!-- 모달 샘플 -->
<template>
  <div>
      <h3>{{ testing }}</h3>
  </div>
</template>


<script setup>
import { onBeforeMount, ref } from 'vue'; // onBeforeMount
import { useStore } from 'vuex'; // Vuex 스토어 가져오기

// Vuex 스토어 인스턴스 가져오기
const store = useStore();

const testing = ref({});
const test = () => {
  testing.value = store.state.loginInfo;
  console.log('ccc', store.state.loginInfo);
};

// 화면 생성되는 시점
onBeforeMount(() => {
  test();
});
</script>
